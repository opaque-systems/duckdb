# CMAKE generated file: DO NOT EDIT!
# Generated by "Unix Makefiles" Generator, CMake Version 3.24

# Default target executed when no arguments are given to make.
default_target: all
.PHONY : default_target

# Allow only one "make -f Makefile2" at a time, but pass parallelism.
.NOTPARALLEL:

#=============================================================================
# Special targets provided by cmake.

# Disable implicit rules so canonical targets will work.
.SUFFIXES:

# Disable VCS-based implicit rules.
% : %,v

# Disable VCS-based implicit rules.
% : RCS/%

# Disable VCS-based implicit rules.
% : RCS/%,v

# Disable VCS-based implicit rules.
% : SCCS/s.%

# Disable VCS-based implicit rules.
% : s.%

.SUFFIXES: .hpux_make_needs_suffix_list

# Command-line flag to silence nested $(MAKE).
$(VERBOSE)MAKESILENT = -s

#Suppress display of executed commands.
$(VERBOSE).SILENT:

# A target that is always out of date.
cmake_force:
.PHONY : cmake_force

#=============================================================================
# Set environment variables for the build.

# The shell in which to execute make rules.
SHELL = /bin/sh

# The CMake executable.
CMAKE_COMMAND = /usr/local/bin/cmake

# The command to remove a file.
RM = /usr/local/bin/cmake -E rm -f

# Escaping for special characters.
EQUALS = =

# The top-level source directory on which CMake was run.
CMAKE_SOURCE_DIR = /home/os/code/duckdb

# The top-level build directory on which CMake was run.
CMAKE_BINARY_DIR = /home/os/code/duckdb/cbuild

#=============================================================================
# Targets provided globally by CMake.

# Special rule for the target edit_cache
edit_cache:
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake cache editor..."
	/usr/local/bin/ccmake -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
.PHONY : edit_cache

# Special rule for the target edit_cache
edit_cache/fast: edit_cache
.PHONY : edit_cache/fast

# Special rule for the target rebuild_cache
rebuild_cache:
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
	/usr/local/bin/cmake --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
.PHONY : rebuild_cache

# Special rule for the target rebuild_cache
rebuild_cache/fast: rebuild_cache
.PHONY : rebuild_cache/fast

# Special rule for the target list_install_components
list_install_components:
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Available install components are: \"Unspecified\""
.PHONY : list_install_components

# Special rule for the target list_install_components
list_install_components/fast: list_install_components
.PHONY : list_install_components/fast

# Special rule for the target install
install: preinstall
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
	/usr/local/bin/cmake -P cmake_install.cmake
.PHONY : install

# Special rule for the target install
install/fast: preinstall/fast
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
	/usr/local/bin/cmake -P cmake_install.cmake
.PHONY : install/fast

# Special rule for the target install/local
install/local: preinstall
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
	/usr/local/bin/cmake -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
.PHONY : install/local

# Special rule for the target install/local
install/local/fast: preinstall/fast
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
	/usr/local/bin/cmake -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
.PHONY : install/local/fast

# Special rule for the target install/strip
install/strip: preinstall
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
	/usr/local/bin/cmake -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
.PHONY : install/strip

# Special rule for the target install/strip
install/strip/fast: preinstall/fast
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
	/usr/local/bin/cmake -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
.PHONY : install/strip/fast

# The main all target
all: cmake_check_build_system
	cd /home/os/code/duckdb/cbuild && $(CMAKE_COMMAND) -E cmake_progress_start /home/os/code/duckdb/cbuild/CMakeFiles /home/os/code/duckdb/cbuild/src/execution//CMakeFiles/progress.marks
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 src/execution/all
	$(CMAKE_COMMAND) -E cmake_progress_start /home/os/code/duckdb/cbuild/CMakeFiles 0
.PHONY : all

# The main clean target
clean:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 src/execution/clean
.PHONY : clean

# The main clean target
clean/fast: clean
.PHONY : clean/fast

# Prepare targets for installation.
preinstall: all
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 src/execution/preinstall
.PHONY : preinstall

# Prepare targets for installation.
preinstall/fast:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 src/execution/preinstall
.PHONY : preinstall/fast

# clear depends
depend:
	cd /home/os/code/duckdb/cbuild && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
.PHONY : depend

# Convenience name for target.
src/execution/CMakeFiles/duckdb_execution.dir/rule:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 src/execution/CMakeFiles/duckdb_execution.dir/rule
.PHONY : src/execution/CMakeFiles/duckdb_execution.dir/rule

# Convenience name for target.
duckdb_execution: src/execution/CMakeFiles/duckdb_execution.dir/rule
.PHONY : duckdb_execution

# fast build rule for target.
duckdb_execution/fast:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/build
.PHONY : duckdb_execution/fast

adaptive_filter.o: adaptive_filter.cpp.o
.PHONY : adaptive_filter.o

# target to build an object file
adaptive_filter.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/adaptive_filter.cpp.o
.PHONY : adaptive_filter.cpp.o

adaptive_filter.i: adaptive_filter.cpp.i
.PHONY : adaptive_filter.i

# target to preprocess a source file
adaptive_filter.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/adaptive_filter.cpp.i
.PHONY : adaptive_filter.cpp.i

adaptive_filter.s: adaptive_filter.cpp.s
.PHONY : adaptive_filter.s

# target to generate assembly for a file
adaptive_filter.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/adaptive_filter.cpp.s
.PHONY : adaptive_filter.cpp.s

aggregate_hashtable.o: aggregate_hashtable.cpp.o
.PHONY : aggregate_hashtable.o

# target to build an object file
aggregate_hashtable.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/aggregate_hashtable.cpp.o
.PHONY : aggregate_hashtable.cpp.o

aggregate_hashtable.i: aggregate_hashtable.cpp.i
.PHONY : aggregate_hashtable.i

# target to preprocess a source file
aggregate_hashtable.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/aggregate_hashtable.cpp.i
.PHONY : aggregate_hashtable.cpp.i

aggregate_hashtable.s: aggregate_hashtable.cpp.s
.PHONY : aggregate_hashtable.s

# target to generate assembly for a file
aggregate_hashtable.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/aggregate_hashtable.cpp.s
.PHONY : aggregate_hashtable.cpp.s

base_aggregate_hashtable.o: base_aggregate_hashtable.cpp.o
.PHONY : base_aggregate_hashtable.o

# target to build an object file
base_aggregate_hashtable.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/base_aggregate_hashtable.cpp.o
.PHONY : base_aggregate_hashtable.cpp.o

base_aggregate_hashtable.i: base_aggregate_hashtable.cpp.i
.PHONY : base_aggregate_hashtable.i

# target to preprocess a source file
base_aggregate_hashtable.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/base_aggregate_hashtable.cpp.i
.PHONY : base_aggregate_hashtable.cpp.i

base_aggregate_hashtable.s: base_aggregate_hashtable.cpp.s
.PHONY : base_aggregate_hashtable.s

# target to generate assembly for a file
base_aggregate_hashtable.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/base_aggregate_hashtable.cpp.s
.PHONY : base_aggregate_hashtable.cpp.s

column_binding_resolver.o: column_binding_resolver.cpp.o
.PHONY : column_binding_resolver.o

# target to build an object file
column_binding_resolver.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/column_binding_resolver.cpp.o
.PHONY : column_binding_resolver.cpp.o

column_binding_resolver.i: column_binding_resolver.cpp.i
.PHONY : column_binding_resolver.i

# target to preprocess a source file
column_binding_resolver.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/column_binding_resolver.cpp.i
.PHONY : column_binding_resolver.cpp.i

column_binding_resolver.s: column_binding_resolver.cpp.s
.PHONY : column_binding_resolver.s

# target to generate assembly for a file
column_binding_resolver.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/column_binding_resolver.cpp.s
.PHONY : column_binding_resolver.cpp.s

expression_executor.o: expression_executor.cpp.o
.PHONY : expression_executor.o

# target to build an object file
expression_executor.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/expression_executor.cpp.o
.PHONY : expression_executor.cpp.o

expression_executor.i: expression_executor.cpp.i
.PHONY : expression_executor.i

# target to preprocess a source file
expression_executor.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/expression_executor.cpp.i
.PHONY : expression_executor.cpp.i

expression_executor.s: expression_executor.cpp.s
.PHONY : expression_executor.s

# target to generate assembly for a file
expression_executor.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/expression_executor.cpp.s
.PHONY : expression_executor.cpp.s

expression_executor_state.o: expression_executor_state.cpp.o
.PHONY : expression_executor_state.o

# target to build an object file
expression_executor_state.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/expression_executor_state.cpp.o
.PHONY : expression_executor_state.cpp.o

expression_executor_state.i: expression_executor_state.cpp.i
.PHONY : expression_executor_state.i

# target to preprocess a source file
expression_executor_state.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/expression_executor_state.cpp.i
.PHONY : expression_executor_state.cpp.i

expression_executor_state.s: expression_executor_state.cpp.s
.PHONY : expression_executor_state.s

# target to generate assembly for a file
expression_executor_state.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/expression_executor_state.cpp.s
.PHONY : expression_executor_state.cpp.s

join_hashtable.o: join_hashtable.cpp.o
.PHONY : join_hashtable.o

# target to build an object file
join_hashtable.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/join_hashtable.cpp.o
.PHONY : join_hashtable.cpp.o

join_hashtable.i: join_hashtable.cpp.i
.PHONY : join_hashtable.i

# target to preprocess a source file
join_hashtable.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/join_hashtable.cpp.i
.PHONY : join_hashtable.cpp.i

join_hashtable.s: join_hashtable.cpp.s
.PHONY : join_hashtable.s

# target to generate assembly for a file
join_hashtable.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/join_hashtable.cpp.s
.PHONY : join_hashtable.cpp.s

partitionable_hashtable.o: partitionable_hashtable.cpp.o
.PHONY : partitionable_hashtable.o

# target to build an object file
partitionable_hashtable.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/partitionable_hashtable.cpp.o
.PHONY : partitionable_hashtable.cpp.o

partitionable_hashtable.i: partitionable_hashtable.cpp.i
.PHONY : partitionable_hashtable.i

# target to preprocess a source file
partitionable_hashtable.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/partitionable_hashtable.cpp.i
.PHONY : partitionable_hashtable.cpp.i

partitionable_hashtable.s: partitionable_hashtable.cpp.s
.PHONY : partitionable_hashtable.s

# target to generate assembly for a file
partitionable_hashtable.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/partitionable_hashtable.cpp.s
.PHONY : partitionable_hashtable.cpp.s

perfect_aggregate_hashtable.o: perfect_aggregate_hashtable.cpp.o
.PHONY : perfect_aggregate_hashtable.o

# target to build an object file
perfect_aggregate_hashtable.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/perfect_aggregate_hashtable.cpp.o
.PHONY : perfect_aggregate_hashtable.cpp.o

perfect_aggregate_hashtable.i: perfect_aggregate_hashtable.cpp.i
.PHONY : perfect_aggregate_hashtable.i

# target to preprocess a source file
perfect_aggregate_hashtable.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/perfect_aggregate_hashtable.cpp.i
.PHONY : perfect_aggregate_hashtable.cpp.i

perfect_aggregate_hashtable.s: perfect_aggregate_hashtable.cpp.s
.PHONY : perfect_aggregate_hashtable.s

# target to generate assembly for a file
perfect_aggregate_hashtable.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/perfect_aggregate_hashtable.cpp.s
.PHONY : perfect_aggregate_hashtable.cpp.s

physical_operator.o: physical_operator.cpp.o
.PHONY : physical_operator.o

# target to build an object file
physical_operator.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/physical_operator.cpp.o
.PHONY : physical_operator.cpp.o

physical_operator.i: physical_operator.cpp.i
.PHONY : physical_operator.i

# target to preprocess a source file
physical_operator.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/physical_operator.cpp.i
.PHONY : physical_operator.cpp.i

physical_operator.s: physical_operator.cpp.s
.PHONY : physical_operator.s

# target to generate assembly for a file
physical_operator.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/physical_operator.cpp.s
.PHONY : physical_operator.cpp.s

physical_plan_generator.o: physical_plan_generator.cpp.o
.PHONY : physical_plan_generator.o

# target to build an object file
physical_plan_generator.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/physical_plan_generator.cpp.o
.PHONY : physical_plan_generator.cpp.o

physical_plan_generator.i: physical_plan_generator.cpp.i
.PHONY : physical_plan_generator.i

# target to preprocess a source file
physical_plan_generator.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/physical_plan_generator.cpp.i
.PHONY : physical_plan_generator.cpp.i

physical_plan_generator.s: physical_plan_generator.cpp.s
.PHONY : physical_plan_generator.s

# target to generate assembly for a file
physical_plan_generator.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/physical_plan_generator.cpp.s
.PHONY : physical_plan_generator.cpp.s

radix_partitioned_hashtable.o: radix_partitioned_hashtable.cpp.o
.PHONY : radix_partitioned_hashtable.o

# target to build an object file
radix_partitioned_hashtable.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/radix_partitioned_hashtable.cpp.o
.PHONY : radix_partitioned_hashtable.cpp.o

radix_partitioned_hashtable.i: radix_partitioned_hashtable.cpp.i
.PHONY : radix_partitioned_hashtable.i

# target to preprocess a source file
radix_partitioned_hashtable.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/radix_partitioned_hashtable.cpp.i
.PHONY : radix_partitioned_hashtable.cpp.i

radix_partitioned_hashtable.s: radix_partitioned_hashtable.cpp.s
.PHONY : radix_partitioned_hashtable.s

# target to generate assembly for a file
radix_partitioned_hashtable.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/radix_partitioned_hashtable.cpp.s
.PHONY : radix_partitioned_hashtable.cpp.s

reservoir_sample.o: reservoir_sample.cpp.o
.PHONY : reservoir_sample.o

# target to build an object file
reservoir_sample.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/reservoir_sample.cpp.o
.PHONY : reservoir_sample.cpp.o

reservoir_sample.i: reservoir_sample.cpp.i
.PHONY : reservoir_sample.i

# target to preprocess a source file
reservoir_sample.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/reservoir_sample.cpp.i
.PHONY : reservoir_sample.cpp.i

reservoir_sample.s: reservoir_sample.cpp.s
.PHONY : reservoir_sample.s

# target to generate assembly for a file
reservoir_sample.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/reservoir_sample.cpp.s
.PHONY : reservoir_sample.cpp.s

window_segment_tree.o: window_segment_tree.cpp.o
.PHONY : window_segment_tree.o

# target to build an object file
window_segment_tree.cpp.o:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/window_segment_tree.cpp.o
.PHONY : window_segment_tree.cpp.o

window_segment_tree.i: window_segment_tree.cpp.i
.PHONY : window_segment_tree.i

# target to preprocess a source file
window_segment_tree.cpp.i:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/window_segment_tree.cpp.i
.PHONY : window_segment_tree.cpp.i

window_segment_tree.s: window_segment_tree.cpp.s
.PHONY : window_segment_tree.s

# target to generate assembly for a file
window_segment_tree.cpp.s:
	cd /home/os/code/duckdb/cbuild && $(MAKE) $(MAKESILENT) -f src/execution/CMakeFiles/duckdb_execution.dir/build.make src/execution/CMakeFiles/duckdb_execution.dir/window_segment_tree.cpp.s
.PHONY : window_segment_tree.cpp.s

# Help Target
help:
	@echo "The following are some of the valid targets for this Makefile:"
	@echo "... all (the default if no target is provided)"
	@echo "... clean"
	@echo "... depend"
	@echo "... edit_cache"
	@echo "... install"
	@echo "... install/local"
	@echo "... install/strip"
	@echo "... list_install_components"
	@echo "... rebuild_cache"
	@echo "... duckdb_execution"
	@echo "... adaptive_filter.o"
	@echo "... adaptive_filter.i"
	@echo "... adaptive_filter.s"
	@echo "... aggregate_hashtable.o"
	@echo "... aggregate_hashtable.i"
	@echo "... aggregate_hashtable.s"
	@echo "... base_aggregate_hashtable.o"
	@echo "... base_aggregate_hashtable.i"
	@echo "... base_aggregate_hashtable.s"
	@echo "... column_binding_resolver.o"
	@echo "... column_binding_resolver.i"
	@echo "... column_binding_resolver.s"
	@echo "... expression_executor.o"
	@echo "... expression_executor.i"
	@echo "... expression_executor.s"
	@echo "... expression_executor_state.o"
	@echo "... expression_executor_state.i"
	@echo "... expression_executor_state.s"
	@echo "... join_hashtable.o"
	@echo "... join_hashtable.i"
	@echo "... join_hashtable.s"
	@echo "... partitionable_hashtable.o"
	@echo "... partitionable_hashtable.i"
	@echo "... partitionable_hashtable.s"
	@echo "... perfect_aggregate_hashtable.o"
	@echo "... perfect_aggregate_hashtable.i"
	@echo "... perfect_aggregate_hashtable.s"
	@echo "... physical_operator.o"
	@echo "... physical_operator.i"
	@echo "... physical_operator.s"
	@echo "... physical_plan_generator.o"
	@echo "... physical_plan_generator.i"
	@echo "... physical_plan_generator.s"
	@echo "... radix_partitioned_hashtable.o"
	@echo "... radix_partitioned_hashtable.i"
	@echo "... radix_partitioned_hashtable.s"
	@echo "... reservoir_sample.o"
	@echo "... reservoir_sample.i"
	@echo "... reservoir_sample.s"
	@echo "... window_segment_tree.o"
	@echo "... window_segment_tree.i"
	@echo "... window_segment_tree.s"
.PHONY : help



#=============================================================================
# Special targets to cleanup operation of make.

# Special rule to run CMake to check the build system integrity.
# No rule that depends on this can have commands that come from listfiles
# because they might be regenerated.
cmake_check_build_system:
	cd /home/os/code/duckdb/cbuild && $(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
.PHONY : cmake_check_build_system

